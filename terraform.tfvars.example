# 환경별 Terraform 변수 값 예제 파일
# 이 파일을 environments/{환경}/terraform.tfvars로 복사하고 필요에 따라 값을 수정하세요
# 
# 사용 가능한 환경: dev, staging, prod
# 배포 명령: ./deploy.sh [환경] [plan|apply|destroy]

# ========================================
# 기본 설정
# ========================================
environment = "dev"  # dev, staging, prod 중 선택
location = "Korea Central"

# 공통 태그 (모든 리소스에 적용)
common_tags = {
  CostCenter  = "KT AXD"
  Environment = "dev"  # 환경에 맞게 수정
  ManagedBy   = "Terraform"
  Owner       = "JongsuChoi"
  Project     = "hyundai-teams-meeting-ai-translator"
}

# ========================================
# 기존 리소스 사용 설정
# ========================================
use_existing_resource_group = true
existing_resource_group_name = "rg-az01-{환경}-hyundai.teams-01"  # 환경에 맞게 수정

# 기존 네트워킹 리소스 이름으로 설정
existing_vnet_name = "ict-{환경}-kttranslator-vnet-kc"  # 환경에 맞게 수정
existing_subnet_name = "subnet-computing"

# 기존 NSG 사용 (선택적)
# existing_nsg_name = "your-existing-nsg-name"

# ========================================
# VM 설정
# ========================================
vm_name_prefix = "ict-{환경}-kttranslator-cicivm01-kc"  # 환경에 맞게 수정

# VM 개별 이름 설정
windows_vm_names = ["ict-{환경}-kttranslator-winvm01-kc"]  # 환경에 맞게 수정
linux_vm_names = ["ict-{환경}-kttranslator-linuxvm01-kc"]  # 환경에 맞게 수정

create_windows_vm = true
create_linux_vm = true
windows_vm_count = 1
linux_vm_count = 1

# VM 크기 및 스토리지 (환경별로 조정)
windows_vm_size = "Standard_D4s_v3"  # dev: D4s_v3, staging: D4s_v3, prod: D8s_v3
linux_vm_size = "Standard_D4s_v3"    # dev: D4s_v3, staging: D4s_v3, prod: D8s_v3
windows_storage_account_type = "Premium_LRS"
linux_storage_account_type = "Premium_LRS"

# OS 디스크 크기 (환경별로 조정)
os_disk_size_gb = 128  # dev: 128, staging: 128, prod: 256

# 데이터 디스크 설정 (환경별로 조정)
create_data_disk = true
data_disk_size_gb = 32  # dev: 32, staging: 32, prod: 64
data_disk_storage_account_type = "Premium_LRS"
data_disk_caching = "ReadWrite"
data_disk_lun = 0

# 관리자 계정
admin_username = "azureuser"
admin_password = "YourSecurePassword123!"  # 환경별로 다른 강력한 비밀번호 설정

# ========================================
# 네트워킹 설정
# ========================================
create_public_ip = true
public_ip_allocation_method = "Static"
public_ip_sku = "Standard"

# ========================================
# 이미지 설정
# ========================================

# Windows Server 2022 Datacenter 이미지
windows_vm_image_publisher = "MicrosoftWindowsServer"
windows_vm_image_offer = "WindowsServer"
windows_vm_image_sku = "2022-datacenter-azure-edition"
windows_vm_image_version = "latest"

# Ubuntu 24.04 LTS 이미지
linux_vm_image_publisher = "canonical"
linux_vm_image_offer = "ubuntu-24_04-lts"
linux_vm_image_sku = "server"
linux_vm_image_version = "latest"

# ========================================
# Azure CLI 설치 설정
# ========================================
install_azure_cli = true  # VM 생성 시 Azure CLI 자동 설치

# 사용자 정의 스크립트 (선택적)
custom_script_windows = ""  # Windows VM에서 실행할 추가 PowerShell 스크립트
custom_script_linux = ""   # Linux VM에서 실행할 추가 bash 스크립트

# 예시: 추가 소프트웨어 설치
# custom_script_windows = "choco install vscode -y; choco install nodejs -y"
# custom_script_linux = "snap install code --classic; curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -; apt-get install -y nodejs"

# ========================================
# 관리 ID 설정
# ========================================
enable_managed_identity = true  # VM에 관리 ID 활성화
managed_identity_type = "SystemAssigned"  # SystemAssigned, UserAssigned, SystemAssigned,UserAssigned

# 사용자 할당 관리 ID (UserAssigned 사용 시)
# user_assigned_identity_ids = ["/subscriptions/xxx/resourcegroups/xxx/providers/Microsoft.ManagedIdentity/userAssignedIdentities/xxx"]

# VM 관리 ID에 할당할 역할들
role_assignments = {
  "contributor" = {
    role_definition_name = "Contributor"
    scope               = "/subscriptions/d69e62aa-ef39-4bc0-b745-57ebc2bddcc8/resourceGroups/rg-az01-{환경}-hyundai.teams-01"
  }
  "storage_blob_data_contributor" = {
    role_definition_name = "Storage Blob Data Contributor"
    scope               = "/subscriptions/d69e62aa-ef39-4bc0-b745-57ebc2bddcc8"
  }
}

# 일반적인 역할 예시:
# - "Reader": 읽기 전용 액세스
# - "Contributor": 리소스 관리 (역할 할당 제외)
# - "Storage Blob Data Contributor": Blob 데이터 읽기/쓰기
# - "Key Vault Secrets User": Key Vault 시크릿 읽기
# - "AcrPull": Container Registry에서 이미지 pull

# ========================================
# 고급 설정
# ========================================
enable_boot_diagnostics = true